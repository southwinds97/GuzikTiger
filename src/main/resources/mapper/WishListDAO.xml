<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.springboot.mypage.IMyPageService">
    <!-- 위시리스트 조회 -->
    <select id="wishListSelect" resultType="map" parameterType="String">
        SELECT DISTINCT
            w.idx AS idx,
            p.product_name AS productName,
            TO_CHAR(pd.price, 'FM999,999,999,999') AS price,
            pd.img_id AS imgId
        FROM 
            wish_list w
        JOIN 
            product p ON w.product_id = p.product_id
        JOIN 
            product_dtl pd ON p.product_id = pd.product_id
        WHERE 
            w.member_id = #{memberId}
            and pd.idx=1
        ORDER BY w.idx desc
    </select>

    <!-- 위시리스트 중복 확인 -->
    <select id="wishListCheck" parameterType="com.edu.springboot.mypage.WishListDTO" resultType="int">
        SELECT COUNT(*)
        FROM wish_list
        WHERE member_id = #{member_id} AND product_id = #{product_id}
    </select>

    <!-- 위시리스트 추가 -->
    <insert id="wishListAdd" parameterType="com.edu.springboot.mypage.WishListDTO">
        INSERT INTO 
            wish_list (idx, member_id, product_id)
        VALUES (
            wish_list_seq.NEXTVAL,
            #{member_id},
            #{product_id}
        )
    </insert>

    <!-- 위시리스트 삭제 -->
    <delete id="wishListDelete" parameterType="int">
        DELETE FROM wish_list
        WHERE idx = #{idx}
    </delete>

    <!-- 위시리스트 선택 삭제 -->
    <delete id="wishListSelectDelete" parameterType="list">
        DELETE FROM wish_list
        WHERE idx IN
        <foreach item="idx" collection="list" open="(" separator="," close=")">
            #{idx}
        </foreach>
    </delete>

    <!-- 위시리스트 전체 삭제 -->
    <delete id="wishListDeleteAll" parameterType="String">
        DELETE FROM wish_list
        WHERE member_id = #{memberId}
    </delete>
    
    <!-- 최근본 상품 조회  -->
    <select id="recentViewSelect"  resultType="com.edu.springboot.product.ProductDTO">
    	 select a.product_id, a.product_name, b.price, a.img_id, b.idx, d.cd_name,
			         x.option_id_list 
			  from product a , product_dtl b, recent_view_product c ,code_list d,
			  (
			    select product_id , LISTAGG(option_id,';') within group(order by product_id, idx) as option_id_list 
			      from   product_dtl 
			      where 1=1
			      group by product_id
			  )x
			  where 1=1
			  and a.product_id = b.product_id
			  and a.product_id = x.product_id
              and a.product_id = c.product_id
              and b.option_cate = d.code(+)
			  order by c.view_date desc, a.product_id,b.idx
    </select >
    
     <!-- 최근본 상품 등록  -->
    <insert id="recentViewInsert" parameterType="com.edu.springboot.product.ProductDTO">
      MERGE INTO recent_view_product 
		USING  dual 
		    ON (product_id = #{member_id})
		WHEN MATCHED THEN
		    UPDATE SET view_date = sysdate
		WHEN NOT MATCHED THEN
		INSERT (member_id, product_id, view_date) VALUES (#{member_id}, #{product_id},sysdate)

    </insert>

    <!-- 주문 내역 조회 -->
    <select id="orderSelect" resultType="com.edu.springboot.order.OrderDTO" parameterType="String">
    WITH order_combined AS (
        SELECT 
            ol.order_id,
            ol.order_date,
            ol.member_id,
            ol.order_name,
            ol.order_phone,
            ol.order_addr,
            ol.order_amount,
            ol.payment,
            ol.deliv_charge,
            ol.order_prog,
            ol.deliv_prog,
            od.product_id,
            od.option_id,
            od.quantity
        FROM 
            order_list ol
        JOIN 
            order_detail od
        ON 
            ol.order_id = od.order_id
        WHERE 
            ol.member_id = #{id}
    ),
    product_combined AS (
        SELECT 
            p.product_id,
            pd.option_id,
            p.product_name,
            pd.price,
            pd.img_id
        FROM 
            product p
        JOIN 
            product_dtl pd
        ON 
            p.product_id = pd.product_id
    )
    SELECT 
        oc.order_id,
        oc.order_date,
        oc.member_id,
        oc.order_name,
        oc.order_phone,
        oc.order_addr,
        oc.order_amount,
        oc.payment,
        oc.deliv_charge,
        oc.order_prog,
        oc.deliv_prog,
        oc.product_id,
        oc.option_id,
        oc.quantity,
        pc.product_name,
        pc.price,
        pc.img_id
    FROM 
        order_combined oc
    JOIN 
        product_combined pc
    ON 
        oc.product_id = pc.product_id
    AND 
        oc.option_id = pc.option_id
    ORDER BY 
        oc.order_id DESC
</select>
    
</mapper>