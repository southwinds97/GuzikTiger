<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.edu.springboot.product.IProductService">
	 <!-- 수량체크 -->
	<select id="getTotalCount" resultType="int"
	parameterType="com.edu.springboot.ParameterDTO">
	select count(*) from product
	<if test="searchKeyword!=null
		and !searchKeyword.equals('')" >
		where ${searchField} like '%'||#{searchKeyword}||'%'
		</if>
	</select>
			 
	 <!--all상품 -->		 
	<select id="getAllSelect"
		resultType = "com.edu.springboot.product.ProductDTO"
		parameterType="com.edu.springboot.ParameterDTO">
		select  a.product_id,
		    a.product_name as product_name, 
		    a.product_content as product_content , 
		    b.stock as stock,
		    b.img_id as img_id,
		    TO_CHAR(b.price, 'FM999,999,999,999') as price
		from product a, product_dtl b 
		where 1=1
		and b.idx = 1
		and a.product_id = b.product_id
		order by a.product_name 
	</select>
	
	
	<select id="testAllList" resultType = "com.edu.springboot.product.ProductDTO">
		select * from product_dtl 
	</select>
	
	
	 <!-- new상품 -->
	<select id="getProductNewList"
		resultType = "com.edu.springboot.product.ProductDTO"
		parameterType="com.edu.springboot.ParameterDTO">
		select 
			a.product_id,
			c.elapsed_date,
			    a.product_name as product_name, 
			    a.product_content as product_content , 
			    b.stock as stock,
			    b.img_id as img_id,
			    TO_CHAR(b.price, 'FM999,999,999,999') as price
			from product a, product_dtl b ,
			(select t.product_id,rownum num , t.elapsed_date elapsed_date from 
			(select product_id, to_date(sysdate, 'yyyy/mm/dd') - to_date(regidate, 'yyyy/mm/dd') elapsed_date 
			    from product_dtl where idx=1  order by elapsed_date ) t )c
		where 1=1
		
		and b.idx = 1
		and a.product_id = b.product_id
		and b.product_id = c.product_id
		and c.num <![CDATA[<=]]>30
		order by c.elapsed_date  

	</select>
	
	 <!-- best상품 -->
	<select id="getProductBestList"
			resultType="com.edu.springboot.product.ProductDTO"
			parameterType="com.edu.springboot.ParameterDTO">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content , 
				b.stock as b_stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				c.stock as c_stock,
				c.sell_count as sell_count,
				rownum as rnum
			from product a, product_dtl b,
			(select product_id, sum(stock) stock, sum(sell_count) sell_count from product_dtl
			group by product_id
			order by product_id) c
			where 1=1
			and b.idx = 1
			and a.product_id = b.product_id
			and b.product_id = c.product_id
			order by c.sell_count desc
		)
		where rnum between 1 and 8
	</select>

	<select id="mainCategoryList" resultType = "com.edu.springboot.product.CodeListDTO" >
		select cd_name  from code_list where category = 'mainCate' 
		<!-- 중복 제거 -->
		group by cd_name
	</select>

	<select id="subCategoryList" parameterType="String" resultType="com.edu.springboot.product.CodeListDTO">
        SELECT cd_name FROM code_list WHERE cd_name = #{category} AND ROWNUM = 1
    </select>

	<!-- cd_name으로 code 가져오기 -->
    <select id="getCodeByCdName" parameterType="String" resultType="String">
        SELECT code FROM code_list WHERE cd_name = #{cd_name} AND ROWNUM = 1
    </select>

	<!-- cd_name으로 up_code 가져오기 (code가 'A'로 시작하지 않는 경우) -->
    <select id="getCategoriesByCdName" parameterType="String" resultType="com.edu.springboot.product.CodeListDTO">
        SELECT up_code FROM code_list WHERE cd_name = #{cd_name}
    </select>

	<!-- up_code로 cd_name 리스트 조회 -->
    <select id="getCategoriesByUpCode" parameterType="String" resultType="com.edu.springboot.product.CodeListDTO">
        SELECT cd_name FROM code_list WHERE up_code = #{up_code}
		group by cd_name
    </select>

	<!-- 코드를 이용해서 mainCate 상품 검색 -->
	<select id="getSelectByCodeMain" parameterType="map" resultType="com.edu.springboot.product.ProductDTO">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content , 
				b.stock as stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				rownum as rnum
			from product a, product_dtl b, code_list c
			where 1=1
			and b.idx = 1
			and a.product_id = b.product_id
			and a.sub_cate like '%'||c.code||'%'
			and c.up_code = #{code}
			<choose>
				<when test="list_array == 1">
					order by b.price
				</when>
				<when test="list_array == 2">
					order by a.product_name
				</when>
				<when test="list_array == 3">
					order by b.price
				</when>
				<when test="list_array == 4">
					order by b.price desc
				</when>
				<when test="list_array == 5">
					order by a.product_name
				</when>
				<otherwise>
					order by b.price
				</otherwise>
			</choose>
		)
		where rnum between #{offset} + 1 and #{offset} + #{limit}
	</select>


	<!-- 코드 검색 mainCate 상품 카운트 -->
	<select id="getSelectByCodeMainCount" parameterType="String" resultType="int">
		SELECT COUNT(*)
		from product a, product_dtl b , code_list c
		where 1=1
		and b.idx = 1
		and a.product_id = b.product_id
		and a.sub_cate like '%'||c.code||'%'
		and c.up_code = #{code}
		<!-- order by a.product_name  -->
	</select>

	<!-- 코드검색 subCate 상품 검색  -->
    <select id="getSelectByCodeSub" parameterType="map" resultType="com.edu.springboot.product.ProductDTO">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content , 
				b.stock as stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				rownum as rnum
			from product a, product_dtl b, code_list c
			where 1=1
			and b.idx = 1
			and a.product_id = b.product_id
			and a.sub_cate like '%'||c.code||'%'
			and c.code = #{code}
			<choose>
				<when test="list_array == 1">
					order by b.price
				</when>
				<when test="list_array == 2">
					order by a.product_name
				</when>
				<when test="list_array == 3">
					order by b.price
				</when>
				<when test="list_array == 4">
					order by b.price desc
				</when>
				<when test="list_array == 5">
					order by a.product_name
				</when>
				<otherwise>
					order by b.price
				</otherwise>
			</choose>
		)
		where rnum between #{offset} + 1 and #{offset} + #{limit}
	</select>

    <!-- 코드검색 subCate 상품 카운트 -->
    <select id="getSelectByCodeSubCount" parameterType="String" resultType="int">
        SELECT COUNT(*)
		from product a, product_dtl b , code_list c
		where 1=1
		and b.idx = 1
		and a.product_id = b.product_id
		and a.sub_cate like '%'||c.code||'%'
		and c.code = #{code}
		<!-- order by a.product_name -->
    </select>

	<select id="getSelectByCodeAll"
        resultType="com.edu.springboot.product.ProductDTO"
        parameterType="map">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content, 
				b.stock as stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				rownum as rnum
			from product a
			join product_dtl b on a.product_id = b.product_id
			where b.idx = 1
			<choose>
				<when test="list_array == 1">
					order by b.price
				</when>
				<when test="list_array == 2">
					order by a.product_name
				</when>
				<when test="list_array == 3">
					order by b.price
				</when>
				<when test="list_array == 4">
					order by b.price desc
				</when>
				<when test="list_array == 5">
					order by a.product_name
				</when>
				<otherwise>
					order by b.price
				</otherwise>
			</choose>
		)
		where <![CDATA[rnum > #{offset} and rnum <= #{offset} + #{limit}]]>
	</select>
	
	<!-- 전체검색 수 -->
	<select id="getSelectByCodeAllCount" resultType="int">
		SELECT COUNT(*)
		FROM product a, product_dtl b
		WHERE 1=1
		AND b.idx = 1
		AND a.product_id = b.product_id
	</select>

	<select id="getSelectByCodeBest"
        resultType="com.edu.springboot.product.ProductDTO"
        parameterType="map">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content , 
				b.stock as b_stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				c.stock as c_stock,
				c.sell_count as sell_count,
				rownum as rnum
			from product a
			join product_dtl b on a.product_id = b.product_id
			join (
				select product_id, sum(stock) stock, sum(sell_count) sell_count 
				from product_dtl
				group by product_id
			) c on b.product_id = c.product_id
			where b.idx = 1
			order by c.sell_count desc
		)
		where <![CDATA[rnum < 31]]>
	</select>

	<select id="getSelectByCodeNew"
        resultType="com.edu.springboot.product.ProductDTO"
        parameterType="map">
		select * from (
			select 
				a.product_id,
				c.elapsed_date,
				a.product_name as product_name, 
				a.product_content as product_content, 
				b.stock as stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				rownum as rnum
			from product a
			join product_dtl b on a.product_id = b.product_id
			join (
				select t.product_id, rownum as num, t.elapsed_date 
				from (
					select product_id, to_date(sysdate, 'yyyy/mm/dd') - to_date(regidate, 'yyyy/mm/dd') as elapsed_date 
					from product_dtl 
					where idx = 1  
					order by elapsed_date 
				) t
			) c on b.product_id = c.product_id
			where b.idx = 1
			order by c.elapsed_date
		)
		where <![CDATA[rnum < 31]]>
	</select>

	<!-- 상품 상세  -->
	<select id="getProductDtl" resultType = "com.edu.springboot.product.ProductDTO">
		select 
	        a.product_id,
			a.product_name,
	        b.price,
	        c.cd_name,
	        a.img_id,
	        b.option_cate,
	        b.option_id,
	        b.idx,
	        a.option_yn
		from product a, product_dtl b, code_list c 
		where 1=1
		and a.product_id = b.product_id
        and c.code(+) = b.option_cate
        and a.product_id = #{product_id} 
	</select>

	<!-- 관련상품 리스트 -->
	<select id="getProductRelate" resultType = "com.edu.springboot.product.ProductDTO">
		SELECT product_id, product_name, img_id, price, stock
		FROM (
			SELECT p.product_id, p.product_name, p.img_id, pd.price, pd.stock,
				ROW_NUMBER() OVER (PARTITION BY p.product_name ORDER BY p.product_id) AS rn
			FROM product p
			JOIN product_dtl pd ON p.product_id = pd.product_id
			WHERE pd.sub_cate = (
				SELECT sub_cate
				FROM product_dtl
				WHERE product_id = #{product_id} 
				AND ROWNUM = 1
			)
			AND p.product_id != #{product_id} 
		) subquery
		WHERE rn = 1
	</select>


	<!-- 키워드를 이용한 상품검색 -->
	<select id="getSelectByKeyword" resultType="com.edu.springboot.product.ProductDTO"
        parameterType="map">
		select * from (
			select 
				a.product_id,
				a.product_name as product_name, 
				a.product_content as product_content, 
				b.stock as stock,
				b.img_id as img_id,
				TO_CHAR(b.price, 'FM999,999,999,999') as price,
				rownum as rnum
			from product a
			join product_dtl b on a.product_id = b.product_id
			where b.idx = 1
			<if test="searchKeyword != null and searchKeyword != ''">
				AND a.product_name LIKE '%' || #{searchKeyword} || '%'
			</if>
			<choose>
				<when test="list_array == 1">
					order by b.price
				</when>
				<when test="list_array == 2">
					order by a.product_name
				</when>
				<when test="list_array == 3">
					order by b.price
				</when>
				<when test="list_array == 4">
					order by b.price desc
				</when>
				<when test="list_array == 5">
					order by a.product_name
				</when>
				<otherwise>
					order by b.price
				</otherwise>
			</choose>
		)
		where <![CDATA[rnum > #{offset} and rnum <= #{offset} + #{limit}]]>
	</select>

	<!-- 키워드를 이용한 상품검색 수 -->
	<select id="getSelectByKeywordCount" resultType = "int"
		parameterType="String">
		select count(*)
		from product a, product_dtl b 
		where 1=1
		and b.idx = 1
		and a.product_id = b.product_id
		<if test="searchKeyword != null and searchKeyword != ''">
         AND a.product_name LIKE '%' || #{searchKeyword} || '%'
      	</if>
	</select>
	
	
	<!-- 결제 완료 후 재고 및 판매량 업데이트  -->
	<update id="updateStock" parameterType="com.edu.springboot.product.ProductDTO" >
	 
		update product_dtl 
            set
            (stock , sell_count) = (
            select stock - #{quantity},
            sell_count + #{quantity} 
            from product_dtl where product_id = #{product_id} and idx = #{idx}
            )
        where  product_id = #{product_id} and idx = #{idx}
     
	</update>
	
	<!-- 옵션 수량 선택 시 재고수량과 비교 -->
	<select id="selectStock" resultType = "com.edu.springboot.product.ProductDTO"
		parameterType="com.edu.springboot.product.ProductDTO">
		select * from product_dtl  
		where  product_id = #{product_id} and idx = #{idx}
	</select>
	
	 <!-- 상품테이블 등록 처리 -->
    <insert id="insertPorduct" parameterType="com.edu.springboot.product.ProductDTO">
        INSERT INTO product (product_id, product_name , sub_cate,PRODUCT_CONTENT,OPTION_YN,img_id)
        VALUES ('P'||product_seq.nextval, #{product_name}, #{sub_cate},#{product_content},#{option_yn},#{img_id})
    </insert>
    
     <!-- 상품디테일 테이블 등록 처리 -->
    <insert id="insertPorductDtl" parameterType="com.edu.springboot.product.ProductDTO">
        INSERT INTO product_dtl (product_id, product_name, sub_cate, )
        VALUES (#{id}, endar})
    </insert>
	
</mapper>